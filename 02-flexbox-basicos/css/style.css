:root {
  --azul: #0071b7;
  --blanco: #fff;
  --naranja: #ff4f1e;
}
html {
  font-size: 62.5%; /** 1REM = 10pX **/
  box-sizing: border-box;
}
*,
*:before,
*:after {
  box-sizing: inherit;
}

body {
  background-color: var(--azul);
  font-family: "Lato", sans-serif;
  font-size: 1.6rem;
}

h1,
h2 {
  color: var(--blanco);
  text-align: center;
  margin: 5rem 0;
  padding: 1rem;
}
.caja-curso {
  background-color: var(--naranja);
  text-align: center;
  color: var(--blanco);
  padding: 5rem;
}
.caja-curso h1 {
  margin: 0;
}
.caja-curso p {
  font-size: 2.4rem;
}
.caja-curso a {
  font-size: 2.4rem;
  padding: 2rem;
  display: inline-block;
  text-decoration: none;
  color: var(--blanco);
  padding: 0;
}

.contenedor {
  max-width: 120rem;
  margin: 0 auto;
}
.box {
  background-color: var(--naranja);
  color: var(--blanco);
  padding: 5rem;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 4rem;
  border: 1rem solid #bb2b03;
}

.contenedor > div {
  background-color: var(--blanco);
  padding: 5rem;
}

/* 1 Display Flex*/

.d-flex {
  display: flex;
}

/* 2 Flex Direction*/

.d-flex-2 {
  display: flex;
  flex-direction: row-reverse;
  /* por defecto tenemos "row", pero podríamos cambiar el flex direction por "row-reverse", "column", "column-reverse" */
}

/* 3 Justify Content (Dirección Row*/

.d-flex-3 {
  display: flex;
  justify-content: flex-end;
  /* "flex-start" es por defecto, si no también funciona con "start", o podemos utilizar "flex-end" o "end", "center", "space-around", "space-betwen", "space-evenly" */
}

/* 4 Justify Content (Dirección Column) (alinea horizontalmente)*/

.d-flex-4 {
  display: flex;
  flex-direction: column;
  height: 1000px;

  justify-content: center;
  /* "flex-star" es por defecto, si no también funciona con "start", o podemos utilizar "flex-end" o "end", "center", "space-arround", "space-betwen", "space-evenly" */
}

/* 5 Align Items (Dirección Row (alinea verticalmente)*/
.d-flex-5 {
  display: flex;
  height: 700px;

  align-items: center;

  /* "stretch" aparece por default en el navegador (se estira, el resto de opciones sigue el tamaño del contenido), si no también funciona con "flex-start" o "start", "fex-end" o "end", "center", y por ultimo "baseline" */
}

/* 6 Align Items (Dirección Columna) */
.d-flex-6 {
  display: flex;
  flex-direction: column;
  height: 800px;

  align-items: center;
  justify-content: space-between;
}

/* Explicación
    flex-direction: organiza el contenido en fila  (row) o en columna (column) (de izquierda a derecha, o de arriba hacia abajo), y pudiendolo organizar al reves indicando "-reverse"

    justify-content: ubica el contenido acompañando el desrrollo del mismo. Si es row lo ubica de izquierda a derecha, si es column lo ubica de arriba hacia abajo, o viceversa.

    align-items: ubica el contenido hacia sus lados. Si es row lo ubica de arriba hacia abajo, si es column lo ubica de izquierda a derecha, o viceversa.
*/

/* Por defecto en Chrome tengo:
    flex-direction: row; (fila, alinea de izquierda a derecha)
    justify-content: flex-start; (alinea horizontalmente, en "start" a la izquierda)
    align-items: stretch; (alinea verticalmente, "stretch" lo estira)
*/

/* Para alinear un flex-direction: column, los otros dos se invierten y funcionan diferente.
- justify-content funciona de manera vertical
- align-items funciona de manera horizontal
*/

/* 7 Align Items y JustifyContent*/

.d-flex-7{
    display: flex;
    height: 800px;

    flex-direction: column-reverse;
    justify-content: flex-start;
    align-items: center;
}

/* 8 Flex Basis (se puede utilizar para dar ancho a un elemento)*/

.d-flex-8{
    display: flex;
}

.d-flex-8 .box{
    flex-basis: 33.33%;
    flex-basis: 200px;
}

/* 9 Gap y Calc*/

.d-flex-9{
    display: flex;
    justify-content: space-between;
}

.d-flex-9 .box:nth-child(1){
    flex-basis: calc(50% - 1rem);
}

.d-flex-9 .box:nth-child(2),
.d-flex-9 .box:nth-child(3){
    flex-basis: calc(25% - 1rem);
}

/* Flex Wrap (salto de linea)*/

.d-flex-10{
  display: flex;
  flex-wrap: wrap;
  /* "nowrap" no hace salto de linea, y "wrap" si lo hace. Por defecto, los navegadores le aplican nowrap. */
}

.d-flex-10 .box{
  flex-basis: 33.3%;
}

/* Flex Grow (factor de crecimiento de los elementos en CSS)*/

.d-flex-11{
  display: flex;
}

/* con flex-grow puedo asignar a cada hijo el factor de crecimiento que deseo, con numeros, se asignará en proporción a cada elemento. En el ejemplo de abajo, el hijo 1, recibe el doble de pixeles que los otros dos. */

.d-flex-11 .box:nth-child(1){
  flex-grow: 2;
}
.d-flex-11 .box:nth-child(2){
  flex-grow: 1;
}
.d-flex-11 .box:nth-child(3){
  flex-grow: 1;
}

/* Flex Shrink */

/* podría indicar, a que "velocidad" se hace mas chico X elemento a medida que se achica el contenedor (la pantalla). Entonces en el ejemplo de abajo, si achico la pantalla primero se achica el elemento 3, hasta que llega a su minimo y entonces se empiezan a achica a la par los otros dos*/

/* flex-grow es faltor de crecimiento de un elemento, flex-shrink es el factor que indica como se va a haciendo mas chico un elemento */

.d-flex-12{
  display: flex;
}
.d-flex-12 .box{
  flex-grow: 1;
  flex-basis: 300px;
}

.d-flex-12 .box:nth-child(3){
  flex-shrink: 2;
}

/* Flex Shorthand */

.d-flex-13{
  display: flex;
}

.d-flex-13 .box{
  /*  
  flex-basis: 33.3%;
  flex-grow: 1;
  flex-shrink: 1;

  Se reemplaza por:
  */
  flex: 1 0 33.3%;
}
